{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Topic Modelling of Tweets\n",
    "Given a certain hashtag, the data is scraped, cleaned and pushed into LDA.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Twitterscrapper API is used to scrape tweets for a given hashtag in a given timeframe\n",
    "!pip install twitterscraper==0.2.7\n",
    "from twitterscraper import query_tweets\n",
    "import datetime as dt \n",
    "import pandas as pd \n",
    "import csv\n",
    "\n",
    "begin_date = dt.date(2020,1,1)\n",
    "end_date = dt.date(2020,3,1)\n",
    "\n",
    "\n",
    "limit = 10\n",
    "lang = 'english'\n",
    "\n",
    "#change the hashtag here for whatever you find\n",
    "tweets = query_tweets('#bmrcl', begindate = begin_date, enddate = end_date, limit = limit, lang = lang)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tweet object is then changed to dataframe format\n",
    "df = pd.DataFrame(t.__dict__ for t in tweets)\n",
    "#Add new coloumn name in the datafram based on the hashtag scraped\n",
    "df['Name']=\"bmrcl\"\n",
    "df.to_csv(\"bmrcl.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "# Read the CSV into a pandas data frame (df)\n",
    "df = pd.read_csv('bmrcl.csv', sep=',')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>screen_name</th>\n",
       "      <th>username</th>\n",
       "      <th>user_id</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>tweet_url</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>timestamp_epochs</th>\n",
       "      <th>text</th>\n",
       "      <th>text_html</th>\n",
       "      <th>...</th>\n",
       "      <th>has_media</th>\n",
       "      <th>img_urls</th>\n",
       "      <th>video_url</th>\n",
       "      <th>likes</th>\n",
       "      <th>retweets</th>\n",
       "      <th>replies</th>\n",
       "      <th>is_replied</th>\n",
       "      <th>is_reply_to</th>\n",
       "      <th>parent_tweet_id</th>\n",
       "      <th>reply_to_users</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Nareshu_eee</td>\n",
       "      <td>Naresh</td>\n",
       "      <td>104381042</td>\n",
       "      <td>1138125631810523136</td>\n",
       "      <td>/Nareshu_eee/status/1138125631810523136</td>\n",
       "      <td>2019-06-10 16:47:50</td>\n",
       "      <td>1560185270</td>\n",
       "      <td>Can any one #fintech companies add #bmrcl also...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>[]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>urbanupdatemgzn</td>\n",
       "      <td>Urban Update</td>\n",
       "      <td>754960219478888448</td>\n",
       "      <td>1138088645804474368</td>\n",
       "      <td>/urbanupdatemgzn/status/1138088645804474368</td>\n",
       "      <td>2019-06-10 14:20:52</td>\n",
       "      <td>1560176452</td>\n",
       "      <td>BMRCL to receive $335 million funding from AII...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>[]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>maddyvoldy</td>\n",
       "      <td>Naveen</td>\n",
       "      <td>59143924</td>\n",
       "      <td>1137593463673765888</td>\n",
       "      <td>/maddyvoldy/status/1137593463673765888</td>\n",
       "      <td>2019-06-09 05:33:11</td>\n",
       "      <td>1560058391</td>\n",
       "      <td>If you are looking for the latest as-on-date u...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>[]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>impossible14</td>\n",
       "      <td>hemanth n</td>\n",
       "      <td>96393251</td>\n",
       "      <td>1137413806026452993</td>\n",
       "      <td>/impossible14/status/1137413806026452993</td>\n",
       "      <td>2019-06-08 17:39:18</td>\n",
       "      <td>1560015558</td>\n",
       "      <td>Blr still a good investment eh?\\nSpecial thank...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>['https://pbs.twimg.com/media/D8jn0p_UYAArjkj....</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>shailesh_naidu</td>\n",
       "      <td>sHaiLEsH 65</td>\n",
       "      <td>1632995952</td>\n",
       "      <td>1137349950856146944</td>\n",
       "      <td>/shailesh_naidu/status/1137349950856146944</td>\n",
       "      <td>2019-06-08 13:25:33</td>\n",
       "      <td>1560000333</td>\n",
       "      <td>Came through  #byappanahallirailwaycrossing it...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>[]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      screen_name      username             user_id  \\\n",
       "0           0      Nareshu_eee        Naresh           104381042   \n",
       "1           1  urbanupdatemgzn  Urban Update  754960219478888448   \n",
       "2           2       maddyvoldy        Naveen            59143924   \n",
       "3           3     impossible14     hemanth n            96393251   \n",
       "4           4   shailesh_naidu   sHaiLEsH 65          1632995952   \n",
       "\n",
       "              tweet_id                                    tweet_url  \\\n",
       "0  1138125631810523136      /Nareshu_eee/status/1138125631810523136   \n",
       "1  1138088645804474368  /urbanupdatemgzn/status/1138088645804474368   \n",
       "2  1137593463673765888       /maddyvoldy/status/1137593463673765888   \n",
       "3  1137413806026452993     /impossible14/status/1137413806026452993   \n",
       "4  1137349950856146944   /shailesh_naidu/status/1137349950856146944   \n",
       "\n",
       "             timestamp  timestamp_epochs  \\\n",
       "0  2019-06-10 16:47:50        1560185270   \n",
       "1  2019-06-10 14:20:52        1560176452   \n",
       "2  2019-06-09 05:33:11        1560058391   \n",
       "3  2019-06-08 17:39:18        1560015558   \n",
       "4  2019-06-08 13:25:33        1560000333   \n",
       "\n",
       "                                                text  \\\n",
       "0  Can any one #fintech companies add #bmrcl also...   \n",
       "1  BMRCL to receive $335 million funding from AII...   \n",
       "2  If you are looking for the latest as-on-date u...   \n",
       "3  Blr still a good investment eh?\\nSpecial thank...   \n",
       "4  Came through  #byappanahallirailwaycrossing it...   \n",
       "\n",
       "                                           text_html  ... has_media  \\\n",
       "0  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...     False   \n",
       "1  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...     False   \n",
       "2  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...     False   \n",
       "3  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...      True   \n",
       "4  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...     False   \n",
       "\n",
       "                                            img_urls  video_url likes  \\\n",
       "0                                                 []        NaN     0   \n",
       "1                                                 []        NaN     0   \n",
       "2                                                 []        NaN     7   \n",
       "3  ['https://pbs.twimg.com/media/D8jn0p_UYAArjkj....        NaN     2   \n",
       "4                                                 []        NaN     0   \n",
       "\n",
       "   retweets  replies  is_replied  is_reply_to  parent_tweet_id  reply_to_users  \n",
       "0         0        0       False        False              NaN              []  \n",
       "1         0        0       False        False              NaN              []  \n",
       "2         0        1        True        False              NaN              []  \n",
       "3         0        0       False        False              NaN              []  \n",
       "4         0        0       False        False              NaN              []  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1201\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>screen_name</th>\n",
       "      <th>username</th>\n",
       "      <th>user_id</th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>tweet_url</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>timestamp_epochs</th>\n",
       "      <th>text</th>\n",
       "      <th>text_html</th>\n",
       "      <th>...</th>\n",
       "      <th>parent_tweet_id</th>\n",
       "      <th>reply_to_users</th>\n",
       "      <th>TF</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Minute</th>\n",
       "      <th>Second</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Nareshu_eee</td>\n",
       "      <td>Naresh</td>\n",
       "      <td>104381042</td>\n",
       "      <td>1138125631810523136</td>\n",
       "      <td>/Nareshu_eee/status/1138125631810523136</td>\n",
       "      <td>2019-06-10 16:47:50</td>\n",
       "      <td>1560185270</td>\n",
       "      <td>Can any one #fintech companies add #bmrcl also...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "      <td>2019-06-10</td>\n",
       "      <td>2019</td>\n",
       "      <td>06</td>\n",
       "      <td>10</td>\n",
       "      <td>16:47:50</td>\n",
       "      <td>16</td>\n",
       "      <td>47</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>urbanupdatemgzn</td>\n",
       "      <td>Urban Update</td>\n",
       "      <td>754960219478888448</td>\n",
       "      <td>1138088645804474368</td>\n",
       "      <td>/urbanupdatemgzn/status/1138088645804474368</td>\n",
       "      <td>2019-06-10 14:20:52</td>\n",
       "      <td>1560176452</td>\n",
       "      <td>BMRCL to receive $335 million funding from AII...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "      <td>2019-06-10</td>\n",
       "      <td>2019</td>\n",
       "      <td>06</td>\n",
       "      <td>10</td>\n",
       "      <td>14:20:52</td>\n",
       "      <td>14</td>\n",
       "      <td>20</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>maddyvoldy</td>\n",
       "      <td>Naveen</td>\n",
       "      <td>59143924</td>\n",
       "      <td>1137593463673765888</td>\n",
       "      <td>/maddyvoldy/status/1137593463673765888</td>\n",
       "      <td>2019-06-09 05:33:11</td>\n",
       "      <td>1560058391</td>\n",
       "      <td>If you are looking for the latest as-on-date u...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "      <td>2019-06-09</td>\n",
       "      <td>2019</td>\n",
       "      <td>06</td>\n",
       "      <td>09</td>\n",
       "      <td>05:33:11</td>\n",
       "      <td>05</td>\n",
       "      <td>33</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>impossible14</td>\n",
       "      <td>hemanth n</td>\n",
       "      <td>96393251</td>\n",
       "      <td>1137413806026452993</td>\n",
       "      <td>/impossible14/status/1137413806026452993</td>\n",
       "      <td>2019-06-08 17:39:18</td>\n",
       "      <td>1560015558</td>\n",
       "      <td>Blr still a good investment eh?\\nSpecial thank...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "      <td>2019-06-08</td>\n",
       "      <td>2019</td>\n",
       "      <td>06</td>\n",
       "      <td>08</td>\n",
       "      <td>17:39:18</td>\n",
       "      <td>17</td>\n",
       "      <td>39</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>shailesh_naidu</td>\n",
       "      <td>sHaiLEsH 65</td>\n",
       "      <td>1632995952</td>\n",
       "      <td>1137349950856146944</td>\n",
       "      <td>/shailesh_naidu/status/1137349950856146944</td>\n",
       "      <td>2019-06-08 13:25:33</td>\n",
       "      <td>1560000333</td>\n",
       "      <td>Came through  #byappanahallirailwaycrossing it...</td>\n",
       "      <td>&lt;p class=\"TweetTextSize js-tweet-text tweet-te...</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "      <td>2019-06-08</td>\n",
       "      <td>2019</td>\n",
       "      <td>06</td>\n",
       "      <td>08</td>\n",
       "      <td>13:25:33</td>\n",
       "      <td>13</td>\n",
       "      <td>25</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      screen_name      username             user_id  \\\n",
       "0           0      Nareshu_eee        Naresh           104381042   \n",
       "1           1  urbanupdatemgzn  Urban Update  754960219478888448   \n",
       "2           2       maddyvoldy        Naveen            59143924   \n",
       "3           3     impossible14     hemanth n            96393251   \n",
       "4           4   shailesh_naidu   sHaiLEsH 65          1632995952   \n",
       "\n",
       "              tweet_id                                    tweet_url  \\\n",
       "0  1138125631810523136      /Nareshu_eee/status/1138125631810523136   \n",
       "1  1138088645804474368  /urbanupdatemgzn/status/1138088645804474368   \n",
       "2  1137593463673765888       /maddyvoldy/status/1137593463673765888   \n",
       "3  1137413806026452993     /impossible14/status/1137413806026452993   \n",
       "4  1137349950856146944   /shailesh_naidu/status/1137349950856146944   \n",
       "\n",
       "             timestamp  timestamp_epochs  \\\n",
       "0  2019-06-10 16:47:50        1560185270   \n",
       "1  2019-06-10 14:20:52        1560176452   \n",
       "2  2019-06-09 05:33:11        1560058391   \n",
       "3  2019-06-08 17:39:18        1560015558   \n",
       "4  2019-06-08 13:25:33        1560000333   \n",
       "\n",
       "                                                text  \\\n",
       "0  Can any one #fintech companies add #bmrcl also...   \n",
       "1  BMRCL to receive $335 million funding from AII...   \n",
       "2  If you are looking for the latest as-on-date u...   \n",
       "3  Blr still a good investment eh?\\nSpecial thank...   \n",
       "4  Came through  #byappanahallirailwaycrossing it...   \n",
       "\n",
       "                                           text_html  ... parent_tweet_id  \\\n",
       "0  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...             NaN   \n",
       "1  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...             NaN   \n",
       "2  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...             NaN   \n",
       "3  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...             NaN   \n",
       "4  <p class=\"TweetTextSize js-tweet-text tweet-te...  ...             NaN   \n",
       "\n",
       "  reply_to_users          TF  Year  Month  Date      Time  Hour  Minute  \\\n",
       "0             []  2019-06-10  2019     06    10  16:47:50    16      47   \n",
       "1             []  2019-06-10  2019     06    10  14:20:52    14      20   \n",
       "2             []  2019-06-09  2019     06    09  05:33:11    05      33   \n",
       "3             []  2019-06-08  2019     06    08  17:39:18    17      39   \n",
       "4             []  2019-06-08  2019     06    08  13:25:33    13      25   \n",
       "\n",
       "   Second  \n",
       "0      50  \n",
       "1      52  \n",
       "2      11  \n",
       "3      18  \n",
       "4      33  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Extract the textual data present in the tweets\n",
    "text_data=list(df['text'])\n",
    "print(len(text_data))\n",
    "\n",
    "#Extract day and date variables from coloumns present in the dataframe\n",
    "df[['TF','T']]=df.timestamp.apply(lambda x:pd.Series(str(x).split(' ')))\n",
    "df[['Year','Month','Date2']] = df.timestamp.apply(\n",
    "    lambda x: pd.Series(str(x).split(\"-\"))) \n",
    "df[['Date','Time']]=df.Date2.apply(lambda x:pd.Series(str(x).split(\" \")))\n",
    "df[['Hour','Minute','Second']]=df.Time.apply(lambda x:pd.Series(str(x).split(\":\")))\n",
    "del df['Date2']\n",
    "del df['T']\n",
    "#New coloumns are added\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_data=list(df['text'])\n",
    "import nltk\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from nltk.tokenize import sent_tokenize, word_tokenize \n",
    "#Download the nltk dependencies \n",
    "#nltk.download('punkt')\n",
    "#nltk.download('averaged_perceptron_tagger')\n",
    "punc=\"!#$%&'()*+-/:;<=>?@[\\]^_`{|}~@\"\n",
    "\n",
    "#Removal of punctuation tokens\n",
    "for i in range(len(text_data)):\n",
    "\n",
    "    text_data[i]=text_data[i].translate(str.maketrans('', '', punc))\n",
    "\n",
    "#Word tokenize and POS tagging\n",
    "word_list=[nltk.word_tokenize(text_data[i]) for i in range(0,len(text_data))]\n",
    "pos_list=[nltk.pos_tag(nltk.word_tokenize(text_data[i])) for i in range(0,len(text_data))]\n",
    "noun_list=[]\n",
    "nouns=[]\n",
    "#Consider only Nouns for topic modelling\n",
    "for i in range(len(pos_list)):\n",
    "  t=[]\n",
    "  for j in range(len(pos_list[i])):\n",
    "    if((pos_list[i][j][1]=='NN' or pos_list[i][j][1]=='NNS')):\n",
    "      t.append(pos_list[i][j])\n",
    "      nouns.append(pos_list[i][j][0])\n",
    "\n",
    "  noun_list.append(t)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('â€¦', 389),\n",
       " ('metro', 181),\n",
       " ('station', 97),\n",
       " ('road', 90),\n",
       " ('line', 70),\n",
       " ('work', 70),\n",
       " ('time', 54),\n",
       " ('stations', 48),\n",
       " ('trains', 48),\n",
       " ('construction', 45)]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#This gives you the most commonly occuring tokens in the vocabulary. Further data cleaning is advised based on data\n",
    "from collections import Counter\n",
    "Counter(nouns).most_common(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cleaning depends on the type of data present or context of data, since they are tweets need to look at more cases as well\n",
    "for i in nouns:\n",
    "    if(i in ['bmrcl','...','cpronammametro','i','nt','pic.twitter.comnwvJRGJuGJ'] or i.startswith('https')):\n",
    "        nouns.remove(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['fintech'], ['company'], ['metro'], ['recharge'], ['list']]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:2: DeprecationWarning: invalid escape sequence \\]\n",
      "<>:2: DeprecationWarning: invalid escape sequence \\]\n",
      "<>:2: DeprecationWarning: invalid escape sequence \\]\n",
      "<ipython-input-57-1ebda1511241>:2: DeprecationWarning: invalid escape sequence \\]\n",
      "  punc=\"!#$%&'()*+, -./:;<=>?@[\\]^_`{|}~\"\n"
     ]
    }
   ],
   "source": [
    "#Lemmatization of strings and removal of stop words\n",
    "punc=\"!#$%&'()*+, -./:;<=>?@[\\]^_`{|}~\"\n",
    "from nltk.stem import WordNetLemmatizer \n",
    "lemmatizer = WordNetLemmatizer() \n",
    "#nltk.download('wordnet')\n",
    "from nltk.corpus import stopwords\n",
    "#nltk.download('stopwords')\n",
    "stop_words = set(stopwords.words('english'))\n",
    "words_lemma_list=[]\n",
    "\n",
    "for i in range(0,len(nouns)):\n",
    "    if(lemmatizer.lemmatize(nouns[i]) not in stop_words and lemmatizer.lemmatize(nouns[i]) not in punc and len(lemmatizer.lemmatize(nouns[i]))>2  ):\n",
    "      #temp_list.append(lemmatizer.lemmatize(word_list[i]))\n",
    "        words_lemma_list.append([lemmatizer.lemmatize(nouns[i])])\n",
    "        words_lemma.append(lemmatizer.lemmatize(nouns[i]))\n",
    "  #lemma_list.append(temp_list)\n",
    "print(words_lemma_list[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6346"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(words_lemma_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Perform topic modelling using Linear Dirichlet Allocation\n",
    "\n",
    "#!pip install gensim\n",
    "from gensim import corpora\n",
    "dictionary = corpora.Dictionary(words_lemma_list)\n",
    "corpus = [dictionary.doc2bow(text) for text in words_lemma_list]\n",
    "\n",
    "#Use pickle files\n",
    "import pickle\n",
    "pickle.dump(corpus, open('corpus.pkl', 'wb'))\n",
    "dictionary.save('dictionary.gensim')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0, '0.049*\"station\" + 0.039*\"card\" + 0.030*\"line\" + 0.029*\"road\" + 0.025*\"route\" + 0.018*\"bengalurutrains\" + 0.014*\"amount\" + 0.014*\"day\" + 0.013*\"nammametro\" + 0.012*\"people\"')\n",
      "(1, '0.038*\"balance\" + 0.020*\"work\" + 0.016*\"money\" + 0.016*\"year\" + 0.013*\"minimum\" + 0.013*\"plan\" + 0.013*\"way\" + 0.012*\"city\" + 0.012*\"bangaloremetro\" + 0.012*\"toilet\"')\n",
      "(2, '0.071*\"metro\" + 0.044*\"cpronammametro\" + 0.025*\"bmrcl\" + 0.022*\"train\" + 0.017*\"project\" + 0.017*\"time\" + 0.014*\"information\" + 0.012*\"delay\" + 0.012*\"govt\" + 0.011*\"ride\"')\n"
     ]
    }
   ],
   "source": [
    "import gensim\n",
    "#Can vary number of topics\n",
    "NUM_TOPICS = 3\n",
    "ldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics = NUM_TOPICS, id2word=dictionary, passes=15)\n",
    "ldamodel.save('model5.gensim')\n",
    "topics = ldamodel.print_topics(num_words=10)\n",
    "for topic in topics:\n",
    "    print(topic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/pyLDAvis/_prepare.py:257: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  return pd.concat([default_term_info] + list(topic_dfs))\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el107021124534537764894424247\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el107021124534537764894424247_data = {\"mdsDat\": {\"x\": [-0.2684163113560201, 0.14628311249931625, 0.12213319885670408], \"y\": [-0.012729621115221896, -0.20586190763726792, 0.21859152875248974], \"topics\": [1, 2, 3], \"cluster\": [1, 1, 1], \"Freq\": [30.925283432006836, 35.76919174194336, 33.30552291870117]}, \"tinfo\": {\"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\"], \"Freq\": [150.0, 97.0, 93.0, 76.0, 86.0, 60.0, 56.0, 53.0, 48.0, 47.0, 46.0, 36.0, 36.0, 36.0, 36.0, 36.0, 28.0, 29.0, 27.0, 30.0, 26.0, 29.0, 29.0, 24.0, 24.0, 24.0, 26.0, 28.0, 24.0, 27.0, 96.77752685546875, 75.91922760009766, 59.437347412109375, 56.296592712402344, 48.35863494873047, 35.79698944091797, 27.837890625, 26.804231643676758, 25.47939682006836, 24.43069076538086, 24.239215850830078, 23.90272331237793, 23.705936431884766, 21.577564239501953, 18.894014358520508, 16.211519241333008, 15.904786109924316, 15.690190315246582, 14.317856788635254, 14.315682411193848, 14.315682411193848, 13.136136054992676, 12.374127388000488, 11.578274726867676, 11.504473686218262, 11.430890083312988, 11.149813652038574, 10.314690589904785, 10.339879035949707, 10.339879035949707, 86.34333038330078, 45.737571716308594, 36.2611198425293, 35.7705192565918, 30.403589248657227, 29.366811752319336, 29.2236385345459, 27.588287353515625, 26.61475944519043, 26.14838409423828, 23.192609786987305, 23.181562423706055, 22.62720489501953, 21.97953987121582, 20.545494079589844, 19.701580047607422, 18.57197380065918, 18.011478424072266, 17.87232780456543, 16.114986419677734, 14.968143463134766, 14.875041007995605, 14.75643253326416, 14.195978164672852, 13.845932006835938, 13.577383995056152, 13.451032638549805, 13.382182121276855, 13.445643424987793, 13.122353553771973, 150.17628479003906, 92.82547760009766, 53.276180267333984, 47.1805305480957, 36.32189178466797, 36.253639221191406, 28.940574645996094, 25.604768753051758, 24.603307723999023, 23.936317443847656, 22.68778419494629, 20.932706832885742, 20.83439064025879, 17.59910774230957, 17.386077880859375, 15.954323768615723, 14.836730003356934, 14.385697364807129, 13.600663185119629, 12.858224868774414, 12.808009147644043, 12.866897583007812, 12.866897583007812, 12.1328763961792, 11.936266899108887, 11.076726913452148, 9.582855224609375, 9.434091567993164, 9.407377243041992, 9.141387939453125], \"Term\": [\"metro\", \"station\", \"cpronammametro\", \"card\", \"balance\", \"line\", \"road\", \"bmrcl\", \"route\", \"train\", \"work\", \"bengalurutrains\", \"project\", \"time\", \"money\", \"year\", \"amount\", \"information\", \"day\", \"minimum\", \"nammametro\", \"plan\", \"way\", \"people\", \"area\", \"construction\", \"delay\", \"city\", \"pas\", \"bangaloremetro\", \"station\", \"card\", \"line\", \"road\", \"route\", \"bengalurutrains\", \"amount\", \"day\", \"nammametro\", \"people\", \"area\", \"construction\", \"pas\", \"issue\", \"change\", \"service\", \"infrastructure\", \"official\", \"case\", \"paytm\", \"Interest\", \"hour\", \"railanalysis\", \"someone\", \"problem\", \"answer\", \"cost\", \"progress\", \"interest\", \"fraud\", \"balance\", \"work\", \"money\", \"year\", \"minimum\", \"plan\", \"way\", \"city\", \"bangaloremetro\", \"toilet\", \"bus\", \"bit\", \"crore\", \"lack\", \"citizen\", \"traffic\", \"commuter\", \"corridor\", \"phase\", \"ticket\", \"frequency\", \"vehicle\", \"vision\", \"transport\", \"fact\", \"coach\", \"passenger\", \"tree\", \"company\", \"security\", \"metro\", \"cpronammametro\", \"bmrcl\", \"train\", \"project\", \"time\", \"information\", \"delay\", \"govt\", \"ride\", \"recharge\", \"land\", \"power\", \"today\", \"planning\", \"customer\", \"travel\", \"state\", \"sudhirsan16\", \"phase3\", \"month\", \"bank\", \"bmtc\", \"Nope\", \"stretch\", \"car\", \"safety\", \"move\", \"operation\", \"reason\"], \"Total\": [150.0, 97.0, 93.0, 76.0, 86.0, 60.0, 56.0, 53.0, 48.0, 47.0, 46.0, 36.0, 36.0, 36.0, 36.0, 36.0, 28.0, 29.0, 27.0, 30.0, 26.0, 29.0, 29.0, 24.0, 24.0, 24.0, 26.0, 28.0, 24.0, 27.0, 97.34492492675781, 76.48775482177734, 60.004844665527344, 56.863922119140625, 48.92632293701172, 36.36599349975586, 28.407365798950195, 27.37222671508789, 26.047075271606445, 24.998098373413086, 24.808225631713867, 24.470369338989258, 24.277212142944336, 22.145170211791992, 19.461767196655273, 16.77880096435547, 16.4730224609375, 16.258209228515625, 14.886055946350098, 14.8870210647583, 14.8870210647583, 13.70358943939209, 12.943009376525879, 12.147624015808105, 12.071808815002441, 12.00025749206543, 11.717338562011719, 10.8821439743042, 10.910157203674316, 10.910157203674316, 86.86943817138672, 46.26030731201172, 36.78571701049805, 36.29320526123047, 30.93002700805664, 29.890226364135742, 29.747249603271484, 28.11157989501953, 27.137678146362305, 26.673965454101562, 23.715978622436523, 23.704919815063477, 23.150442123413086, 22.504833221435547, 21.0688419342041, 20.224241256713867, 19.0946044921875, 18.5352783203125, 18.397153854370117, 16.63764762878418, 15.490934371948242, 15.399834632873535, 15.281529426574707, 14.721420288085938, 14.371268272399902, 14.099905967712402, 13.973511695861816, 13.905070304870605, 13.971166610717773, 13.645303726196289, 150.6992950439453, 93.35112762451172, 53.80298614501953, 47.703208923339844, 36.844547271728516, 36.776363372802734, 29.467756271362305, 26.128353118896484, 25.12762451171875, 24.463037490844727, 23.212406158447266, 21.45632553100586, 21.35801887512207, 18.12185287475586, 17.91050148010254, 16.478824615478516, 15.361613273620605, 14.908909797668457, 14.126362800598145, 13.382420539855957, 13.330671310424805, 13.393074035644531, 13.393074035644531, 12.659740447998047, 12.459724426269531, 11.599514961242676, 10.105406761169434, 9.958000183105469, 9.931421279907227, 9.66541576385498], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.167799949645996, 1.166100025177002, 1.1641000509262085, 1.163599967956543, 1.1619000434875488, 1.1577999591827393, 1.1533000469207764, 1.1526000499725342, 1.1516000032424927, 1.1505999565124512, 1.1504000425338745, 1.1500999927520752, 1.1497999429702759, 1.1476000547409058, 1.1440000534057617, 1.13919997215271, 1.1384999752044678, 1.1380000114440918, 1.1346999406814575, 1.1345000267028809, 1.1345000267028809, 1.1312999725341797, 1.128600001335144, 1.125599980354309, 1.125499963760376, 1.125, 1.123900055885315, 1.1200000047683716, 1.1198999881744385, 1.1198999881744385, 1.0219999551773071, 1.016700029373169, 1.013700008392334, 1.0135999917984009, 1.0109000205993652, 1.0104000568389893, 1.0103000402450562, 1.0092999935150146, 1.0085999965667725, 1.0082000494003296, 1.0058000087738037, 1.0058000087738037, 1.0052000284194946, 1.0045000314712524, 1.0029000043869019, 1.0018999576568604, 1.0003000497817993, 0.9994000196456909, 0.9991000294685364, 0.9962000250816345, 0.9937999844551086, 0.993399977684021, 0.9930999875068665, 0.9916999936103821, 0.9908000230789185, 0.9902999997138977, 0.9900000095367432, 0.989799976348877, 0.9897000193595886, 0.9890000224113464, 1.0959999561309814, 1.0937999486923218, 1.0895999670028687, 1.0884000062942505, 1.0851999521255493, 1.0851000547409058, 1.0814000368118286, 1.079200029373169, 1.0784000158309937, 1.0777000188827515, 1.0765999555587769, 1.0746999979019165, 1.0745999813079834, 1.070199966430664, 1.069700002670288, 1.0671000480651855, 1.0647000074386597, 1.0636999607086182, 1.0614999532699585, 1.059499979019165, 1.059499979019165, 1.059399962425232, 1.059399962425232, 1.0569000244140625, 1.05649995803833, 1.0533000230789185, 1.0463999509811401, 1.0454000234603882, 1.045199990272522, 1.0436999797821045], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -3.0095999240875244, -3.2523000240325928, -3.4971001148223877, -3.5513999462127686, -3.7032999992370605, -4.0040998458862305, -4.2555999755859375, -4.293399810791016, -4.344099998474121, -4.386099815368652, -4.394000053405762, -4.4079999923706055, -4.416299819946289, -4.510300159454346, -4.643099784851074, -4.796299934387207, -4.815400123596191, -4.828999996185303, -4.920499801635742, -4.920599937438965, -4.920599937438965, -5.0065999031066895, -5.066400051116943, -5.132900238037109, -5.1392998695373535, -5.145699977874756, -5.170599937438965, -5.2484002113342285, -5.245999813079834, -5.245999813079834, -3.269200086593628, -3.904599905014038, -4.1367998123168945, -4.150400161743164, -4.312900066375732, -4.347599983215332, -4.352499961853027, -4.410099983215332, -4.446000099182129, -4.463699817657471, -4.583700180053711, -4.584099769592285, -4.60830020904541, -4.637400150299072, -4.704899787902832, -4.746799945831299, -4.805799961090088, -4.83650016784668, -4.844200134277344, -4.947800159454346, -5.021599769592285, -5.0278000831604, -5.035799980163574, -5.07450008392334, -5.0995001792907715, -5.119100093841553, -5.128399848937988, -5.133600234985352, -5.128799915313721, -5.153200149536133, -2.6442999839782715, -3.1254000663757324, -3.6805999279022217, -3.8022000789642334, -4.063700199127197, -4.0655999183654785, -4.290900230407715, -4.413400173187256, -4.4532999992370605, -4.4807000160217285, -4.534299850463867, -4.614799976348877, -4.619500160217285, -4.788300037384033, -4.80049991607666, -4.88640022277832, -4.959000110626221, -4.9899001121521, -5.046000003814697, -5.102200031280518, -5.106100082397461, -5.101500034332275, -5.101500034332275, -5.160200119018555, -5.176599979400635, -5.251299858093262, -5.396200180053711, -5.411799907684326, -5.414599895477295, -5.443299770355225]}, \"token.table\": {\"Topic\": [1, 3, 1, 1, 1, 2, 2, 3, 1, 2, 3, 3, 2, 3, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 3, 2, 3, 1, 3, 2, 1, 2, 3, 1, 3, 1, 1, 1, 2, 3, 1, 3, 2, 2, 3, 3, 1, 1, 3, 1, 2, 1, 1, 2, 3, 2, 3, 3, 1, 1, 3, 1, 3, 3, 3, 1, 1, 3, 2, 1, 1, 3, 1, 3, 3, 2, 3, 3, 2, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2], \"Freq\": [0.9404164552688599, 0.9478867053985596, 0.9856598377227783, 0.9166470170021057, 0.9674210548400879, 0.9899914264678955, 0.9949266910552979, 0.9706509709358215, 0.9899358153343201, 0.9702627062797546, 0.9850754141807556, 0.9706509709358215, 0.9698103070259094, 0.9483155012130737, 0.9936230778694153, 0.9404774308204651, 0.9762731194496155, 0.9967325329780579, 0.9960308074951172, 0.9929144382476807, 0.9950454831123352, 0.9304878115653992, 0.9807779788970947, 0.9711211323738098, 0.9387797117233276, 0.996238648891449, 0.9935015439987183, 0.970943033695221, 0.9864013195037842, 0.9950875639915466, 0.9741659164428711, 0.9165771007537842, 0.9683082699775696, 0.9949209690093994, 0.9486565589904785, 0.9841265082359314, 0.9712850451469421, 0.9165771007537842, 0.9934446215629578, 0.9775677919387817, 0.9787323474884033, 0.9832539558410645, 0.9953596591949463, 0.9699312448501587, 0.9786406755447388, 0.9751946926116943, 0.9037958979606628, 0.959800660610199, 0.9841182231903076, 0.906214714050293, 0.9885813593864441, 0.9303316473960876, 0.9404164552688599, 0.9600730538368225, 0.9784122109413147, 0.9714236855506897, 0.9702168107032776, 0.9491637945175171, 0.9832372665405273, 0.9940515160560608, 0.918936550617218, 0.9770780801773071, 0.9271414279937744, 0.9311549663543701, 0.9908494353294373, 0.981071949005127, 0.9848071932792664, 0.9810670018196106, 0.9895692467689514, 0.9527087211608887, 0.9535842537879944, 0.9878475069999695, 0.9390357732772827, 0.9964566826820374, 0.963103175163269, 0.9910548329353333, 0.9616743922233582, 0.9788895845413208, 0.9932759404182434, 0.9747332334518433, 0.9889122247695923, 0.9852586388587952, 0.9509952068328857, 0.9764599204063416, 0.934910774230957, 0.974036455154419, 0.9815771579742432, 0.974880039691925, 0.9943729639053345, 0.9919211864471436], \"Term\": [\"Interest\", \"Nope\", \"amount\", \"answer\", \"area\", \"balance\", \"bangaloremetro\", \"bank\", \"bengalurutrains\", \"bit\", \"bmrcl\", \"bmtc\", \"bus\", \"car\", \"card\", \"case\", \"change\", \"citizen\", \"city\", \"coach\", \"commuter\", \"company\", \"construction\", \"corridor\", \"cost\", \"cpronammametro\", \"crore\", \"customer\", \"day\", \"delay\", \"fact\", \"fraud\", \"frequency\", \"govt\", \"hour\", \"information\", \"infrastructure\", \"interest\", \"issue\", \"lack\", \"land\", \"line\", \"metro\", \"minimum\", \"money\", \"month\", \"move\", \"nammametro\", \"official\", \"operation\", \"pas\", \"passenger\", \"paytm\", \"people\", \"phase\", \"phase3\", \"plan\", \"planning\", \"power\", \"problem\", \"progress\", \"project\", \"railanalysis\", \"reason\", \"recharge\", \"ride\", \"road\", \"route\", \"safety\", \"security\", \"service\", \"someone\", \"state\", \"station\", \"stretch\", \"sudhirsan16\", \"ticket\", \"time\", \"today\", \"toilet\", \"traffic\", \"train\", \"transport\", \"travel\", \"tree\", \"vehicle\", \"vision\", \"way\", \"work\", \"year\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [1, 2, 3]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el107021124534537764894424247\", ldavis_el107021124534537764894424247_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el107021124534537764894424247\", ldavis_el107021124534537764894424247_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el107021124534537764894424247\", ldavis_el107021124534537764894424247_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Distribution of keywords in clusters of topics\n",
    "#!pip install pyLDAvis\n",
    "dictionary = gensim.corpora.Dictionary.load('dictionary.gensim')\n",
    "corpus = pickle.load(open('corpus.pkl', 'rb'))\n",
    "lda = gensim.models.ldamodel.LdaModel.load('model5.gensim')\n",
    "import pyLDAvis.gensim\n",
    "lda_display = pyLDAvis.gensim.prepare(lda, corpus, dictionary, sort_topics=False)\n",
    "pyLDAvis.display(lda_display)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
